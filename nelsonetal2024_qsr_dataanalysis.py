# -*- coding: utf-8 -*-
"""Nelsonetal2024_QSR_DataAnalysis

This code has been generated to produce the data analysis described in the following arcticle:
Nelson, E., Püspöki, Z., White, D., Pogácsás, G., McIntosh, R.W., Szappanos, B., Wheeler, L., Fancsik, T., Penkman, K., 2024. 
A Quaternary aminostratigraphy for the Pannonian Basin: The competing influences of time, burial depth and temperature in deep-core material. 
Quaternary Science Reviews 346, 109044. https://doi.org/10.1016/j.quascirev.2024.109044

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2qtBGMsrT71uOuLUAD7c3c2f37HH_KO

# This section is to create plots that show IcPD changes with age. The first plots will plot THAA D/L values against depth. The second will plot % composition of each amino acids to show breakdown patterns within the more ancient samples.
"""

#importing libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import matplotlib

"""# Data import"""

#importing csv files
"""
import csv or excel file by including the correct filepath with the following information:
- 'NEaarNo_FAA': Lab ID
- 'Sample Name_FAA': name assigned to each opercula sample
- 'Genus_FAA': Bithynia
- 'Species_FAA': "leachii" or "tentaculata"
- 'Material_FAA': "opercula"
- Depth (middle depth of sedimentary horizon (m))
- 'Site_FAA": Borehole name
- 'Country_FAA':
- 'Age_FAA': Interpolated age (interpolated age (ka))
- Basin (basin name)
- Interpolated temperature (interpolated temperature at depth midpoint degC)
- FAA and THAA D/L values Asx, Glx, Ala, Val
"""
FAA_CSV = pd.read_csv("INSERT CORRECT FILE PATH HERE FOR FAA data", sep=',', encoding='latin-1')
THAA_CSV = pd.read_csv("INSERT CORRECT FILE PATH HERE FOR THAA data", sep=',', encoding='latin-1')

#transforming csv into pandas dataframe

df_FAA = pd.DataFrame(FAA_CSV)
df_THAA = pd.DataFrame(THAA_CSV)

#replacing NaN values with 0s to prevent code failure
#column numbers should match index for Asx D/L to Total column labels
for col in df_FAA.columns[19:30]:
    df_FAA[col] = pd.to_numeric(df_FAA[col], errors="coerce")

df_FAA = df_FAA.replace(np.nan, 0.0, regex=True)

for col in df_THAA.columns[20:30]:
    df_THAA[col] = pd.to_numeric(df_THAA[col], errors="coerce")

df_THAA = df_THAA.replace(np.nan, 0.0, regex=True)

df_THAA.Basin

#calculating horizon mean for each sample
#function to calculate two stds
def double_std(array):
 return np.std(array) * 2

df_FAA_mean = df_FAA.groupby(['Level/ Sample'], as_index=False).agg(
                      {'Asx D/L':['mean', 'std'],'Glx D/L':['mean', 'std'], 'Ala D/L':['mean', 'std'], 'Val D/L':['mean', 'std'], "Quaternary sites": 'first', 'Basin': 'first'})

df_FAA_mean.columns = ["Level/ Sample", "Asx D/L mean", "Asx D/L std", "Glx D/L mean", "Glx D/L std",
                       "Ala D/L mean", "Ala D/L std", "Val D/L mean", "Val D/L std", "Quaternary sites", 'Basin']

df_THAA_mean = df_THAA.groupby(['Level/ Sample'], as_index=False).agg(
                      {'Asx D/L':['mean', 'std'],'Glx D/L':['mean', 'std'], 'Ala D/L':['mean', 'std'], 'Val D/L':['mean', 'std'], "Quaternary sites": 'first', 'Basin': 'first'})

df_THAA_mean.columns = ["Level/ Sample", "Asx D/L mean", "Asx D/L std", "Glx D/L mean", "Glx D/L std",
                       "Ala D/L mean", "Ala D/L std", "Val D/L mean", "Val D/L std", "Quaternary sites", 'Basin']

#sort values to ensure that both dataframes are in the correct order
df_THAA_mean = df_THAA_mean.sort_values(by=["Quaternary sites"], axis=0)
df_THAA_mean = df_THAA_mean.sort_values(by=["Basin"], axis=0)
df_THAA_mean.tail()

df_FAA_mean = df_THAA_mean.sort_values(by=["Quaternary sites"], axis=0)
df_FAA_mean = df_THAA_mean.sort_values(by=["Basin"], axis=0)
df_FAA_mean.tail()

"""# Depth vs. age plot"""

Age = [0, 20, 140, 252, 343, 436, 632, 802, 880, 964, 1200, 1290, 1456, 1535, 1707, 1865, 2155, 2240, 2487.5, 2600]
Depth = [0, 0, 15.5, 33.7, 44.8, 75.4, 80.9, 107.1, 124, 139.4, 163.4, 187, 206.7, 239, 276, 298, 343.1, 352.2, 407, 440]

Depth_v = [0, 9.1, 21, 55.5, 70, 86.9, 95.5, 137.7, 170.5 , 195.1, 215.4, 231.8, 262.2, 281.5, 314.2, 350, 411, 425, 460.2, 493.2]

Depth_s = [0, 0, 16.5, 28.95, 44.72, 67.48, 84.91, 121.17, 136.78, 146.75, 173.96, 185.2, 208.29, 235.85, 273.64, 310, 354.18, 371.32, 415.35, 442.42]

Depth_m = [0, 1, 9.9, 50, 80, 138.58, 170, 194.41, 230, 259.06, 290, 298.3, 327.795, 395.8, 453.3, 492.7, 547.21, 566.45, 592.57, 624.07]

Depth_j = [0, 0, 0, 51.88, 73.02, 120.76, 131.82, 168.13, 180, 195.82, 215, 222.98, 238.73, 253.05, 272.78,290, 317.16, 328.94, 360, 360]
Depth_p = [0, 0, 20.5, 36, 55, 69, 89, 137.2, 147.5, 169, 191, 206.5, 215.5, 230, 274, 317.5, 355.5, 388, 409, 430]
Depth_k = [0, 20, 35.5, 60.8, 89, 123, 138, 192, 202.5, 224, 246, 275.5, 285, 298, 351, 367.5, 427.6, 456.5, 483, 487]

Age_j = [140, 252, 343, 436, 632, 802, 880, 964, 1200, 1290, 1456, 1535, 1707, 1865, 2155, 2240, 2487.5, 2600]

plt.plot(Age, Depth_v, c="maroon", label="Vésztő, KB", linestyle = "dotted")
plt.plot(Age, Depth, c="red", label="Dévaványa, KB", linestyle = "dotted")
plt.plot(Age, Depth_s, c="darkorange", label="Szarvas, KB", linestyle = "dotted")
plt.plot(Age, Depth_m, c="green", label="Mindszent, MT")
plt.plot(Age, Depth_j, c="blue", label="Jászladány, JB", linestyle = (0,(3,1,1,1)))
plt.plot(Age, Depth_k, c="magenta", label="Kevermes, BB", linestyle = "dashed")
plt.plot(Age, Depth_p, c="plum", label="Pusztaottlaka, BB", linestyle= "dashed")
plt.gca().invert_yaxis()
plt.xlabel("Interpolated age at depth/ ka")
plt.legend(loc="lower left", fontsize=10)
plt.ylabel("Depth/ m")

"""# D/L vs. depth"""

marker_styles = {
       'Koros Basin': 'o',
       'Mako Trough': '^',
       'Jaszsag Basin' : '*',
       'Maros Fan': '>',
               }
df_THAA_mean['marker_style'] = df_THAA_mean['Basin'].map(marker_styles)
markers=list(df_THAA_mean['marker_style'])

#defining function for plots
def depth_plot(df, AA, ax, legend):
    sns.set(style="ticks")
    palette = {
        'Vészto': 'maroon',
        'Dévaványa': 'red',
        'Szarvas': 'darkorange',
        'Mindszent': 'green',
        'Jászladány' : 'mediumblue',
        'Kevermes': 'magenta',
        'Pusztaottlaka' : 'plum'
               }
    palette2 = {"Tengelic" : "black", "Csongrad" : "grey"}
    marker_dict = {
        'Koros Basin': 'o',
        'Mako Trough': '^',
        'Jaszsag Basin' : '*',
        'Maros Fan': 's'
        }

    #defining amino acid columns to be used
    AA_colnames = [col for col in df.columns if str(AA) + " D/L" in col]
    AA_mean = AA_colnames[0] # mean AA
    AA_sd = AA_colnames[1] # std AA
    x=df["Level/ Sample"] #xerr point
    y=AA_mean # yerr point
    ax.errorbar(df["Level/ Sample"], df[AA_mean], yerr= df[AA_sd], linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=1) # plotting error

    if AA == "Val":
      # Create scatter plot
      # Map category values to marker styles
      # Define marker dictionary
      # Track plotted categories
      plotted_marker_categories = set()
      plotted_color_categories = set()

      # Create scatter plot
      for marker_category, color_category, x, y in zip(df['Basin'], df['Quaternary sites'], x, df[AA_mean]):
          if color_category not in plotted_color_categories:
            ax.scatter(x, y, marker=marker_dict[marker_category], color=palette[color_category], label=f'{color_category}')
            plotted_marker_categories.add(marker_category)
            plotted_color_categories.add(color_category)
          else:
            ax.scatter(x, y, marker=marker_dict[marker_category], color=palette[color_category])

      # Add legend
      desired_order = ['Vészto', 'Dévaványa', 'Szarvas', 'Mindszent', 'Jászladány', 'Kevermes', 'Pusztaottlaka'] #order of labels in legend

      handles, labels = ax.get_legend_handles_labels()
      ordered_handles = [handles[labels.index(label)] for label in desired_order]
      ordered_labels = ["Vésztő, KB", "Dévaványa, KB", 'Szarvas, KB', 'Mindszent, MT', 'Jászladány, JB', 'Kevermes, BB', 'Pusztaottlaka, BB']

      ax.legend(handles=ordered_handles, labels=ordered_labels, loc='lower right', fontsize=10)
      ax.set_xlabel("Depth/ m")
      ax.set_ylabel(f'THAA {AA} D/L Value')

      # Show plot
      plt.show()

    else:
          # Create scatter plot
      # Map category values to marker styles
      # Define marker dictionary
      # Track plotted categories
      plotted_marker_categories = set()
      plotted_color_categories = set()

      # Create scatter plot
      for marker_category, color_category, x, y in zip(df_THAA_mean['Basin'], df_THAA_mean['Quaternary sites'], x, df[AA_mean]):
          if color_category not in plotted_color_categories:
            ax.scatter(x, y, marker=marker_dict[marker_category], color=palette[color_category])
            plotted_marker_categories.add(marker_category)
            plotted_color_categories.add(color_category)
          else:
            ax.scatter(x, y, marker=marker_dict[marker_category], color=palette[color_category])

      ax.set_xlabel("Depth/ m")
      ax.set_ylabel(f'THAA {AA} D/L Value')

#plotting depth vs. THAA D/L
rows = 2
cols = 2
fig, ax = plt.subplots(nrows=rows, ncols= cols, figsize = (14,12))

depth_plot(df_THAA_mean, "Asx", ax[0,0], False)
depth_plot(df_THAA_mean, "Ala", ax[0,1], False)
depth_plot(df_THAA_mean, "Glx", ax[1,0], False)
depth_plot(df_THAA_mean, "Val", ax[1,1], True)

"""# The next graph plots % composition of amino acids for THAA fraction. This is to display how composition varies with age. I.e serine degrading to alanine.

The next section includes to produce frees vs. hyds plots. Again I will be focusing on alanine and valine, as I find these the most useful to show the spread of IcPD at these age ranges. Glx is useful, but much more variable due to the conversion of free Glx to lactam, especially at high temperatures.
"""

df_FAA.columns

#extracting data from FAA csv and placing in dataframe
df_FAA = pd.DataFrame(FAA_CSV)
df_FAA = df_FAA.add_suffix("_FAA") #suffix data remains allocated to correct fraction
df_FAA.columns

#extracting data from FAA csv and placing in dataframe
df_FAA = pd.DataFrame(FAA_CSV)
df_FAA = df_FAA.add_suffix("_FAA") #suffix data remains allocated to correct fraction

#to prvent error in code all division errors are replaced with zeros

for col in df_FAA.columns[18:27]:
    df_FAA[col] = pd.to_numeric(df_FAA[col], errors="coerce")

df_FAA = df_FAA.replace(np.nan, 0.0, regex=True) #all nan values removed and replace with 0s

df_FAA_MN = df_FAA.groupby(['Sample name_FAA'], as_index=False).agg({'Replicates_FAA' : 'first',
                                                                     'location_FAA' : 'first',
                                                                     'Quaternary sites_FAA' : 'first',
                                                                     'Level/ Sample_FAA' : 'first',
                                                                     'relative_FAA' : 'first',
                                                                     'Age_range_FAA' : 'first',
                                                                     'Age_mid_FAA' : 'first',
                                                                     'MIS_FAA' : 'first',
                                                                     'MS_Cycle_FAA': 'first',
                                                                     'Basin_FAA' : 'first',
                                                                     "Asx D/L_FAA" : 'mean', "Glx D/L_FAA" : 'mean',
                                                                     "Ser D/L_FAA" : 'mean', "Arg D/L_FAA" : 'mean',
                                                                     "Ala D/L_FAA" : 'mean',"Tyr D/L_FAA" : 'mean',
                                                                     "Val D/L_FAA" : 'mean',"Phe D/L_FAA" : 'mean',
                                                                     "Leu D/L_FAA" : 'mean', "Ile D/L_FAA" : 'mean',
                                                                     "[Ser]/[Ala]_FAA" : 'mean'})




#pulling THAA into dataframe
df_THAA = pd.DataFrame(THAA_CSV)
df_THAA = df_THAA.add_suffix("_THAA")

for col in df_THAA.columns[20:27]:
    df_THAA[col] = pd.to_numeric(df_THAA[col], errors="coerce")

df_THAA = df_THAA.replace(np.nan, 0.0, regex=True) #all nan values removed and replace with 0s

df_THAA_MN = df_THAA.groupby(['Sample name_THAA'], as_index=False).agg({'NEaarNo_THAA' : 'first',
                                                                 'location_THAA' : 'first',
                                                                 'Quaternary sites_THAA' : 'first',
                                                                 'Level/ Sample_THAA' : 'first',
                                                                 'relative_THAA' : 'first',
                                                                 'Age if known_THAA' : 'first',
                                                                 'Age_mid_THAA' : 'first',
                                                                 'Age_error_THAA' : 'first',
                                                                 'MIS_THAA' : 'first',
                                                                 'Basin_THAA' : 'first',
                                                                 "Asx D/L_THAA" : 'mean', "Glx D/L_THAA" : 'mean',
                                                                 "Ser D/L_THAA" : 'mean', "Arg D/L_THAA" : 'mean',
                                                                 "Ala D/L_THAA" : 'mean',"Tyr D/L_THAA" : 'mean',
                                                                 "Val D/L_THAA" : 'mean',"Phe D/L_THAA" : 'mean',
                                                                 "Ile D/L_THAA" : 'mean',
                                                                 "[Ser]/[Ala]_THAA" : 'mean'})
df_THAA.Basin_THAA

df_THAA_MN

#concatenating df_FAA and df_THAA dataframes. Only df_FAA catagory columns will be included in this table
df_mean_all =  pd.concat([df_FAA_MN, df_THAA_MN[[('Asx D/L_THAA'),
                                           ('Glx D/L_THAA'),
                                           ('Ser D/L_THAA'),
                                           ('Arg D/L_THAA'),
                                           ('Ala D/L_THAA'),
                                           ('Tyr D/L_THAA'),
                                           ('Val D/L_THAA'),
                                           ('Phe D/L_THAA'),
                                           ('Ile D/L_THAA'),
                                           ('[Ser]/[Ala]_THAA')]]], axis=1)

#df_mean_all = df_mean_all.sort_values(by=["Quaternary sites_FAA"], axis=0)

df_mean_all = df_mean_all.sort_values(["Age_mid_FAA", "Quaternary sites_FAA"], inplace=False, ascending=True)
df_mean_all["Horizon"] = df_mean_all["Quaternary sites_FAA"] + " " + df_mean_all["location_FAA"]


df_mean_all.tail()

"""The following plots are to create stratigraphic profiles for each borehole to demonstrate how D/Ls change with time. Overall change will be demonstrated seperately.

# All data plots
"""

"""
import csv or excel file by including the correct filepath with the following information:
- 'NEaarNo_FAA': Lab ID
- 'Sample Name_FAA': name assigned to each opercula sample
- 'Genus_FAA': Bithynia
- 'Species_FAA': "leachii" or "tentaculata"
- 'Material_FAA': "opercula"
- Depth (middle depth of sedimentary horizon (m))
- 'Site_FAA": Borehole name
- 'Country_FAA':
- 'Age_FAA': Interpolated age (interpolated age (ka))
- Basin (basin name)
- Interpolated temperature (interpolated temperature at depth midpoint degC)
- FAA and THAA D/L values Asx, Glx, Ala, Val mean and standard deviation
"""

#importing csv files
FAA_all = pd.read_excel("INSERT FILE PATH HERE", sheet_name="Frees")
THAA_all = pd.read_excel("INSERT FILE PATH HERE", sheet_name="Hyd")

#transforming csv into pandas dataframe

df_FAAALL = pd.DataFrame(FAA_all)
df_THAAALL = pd.DataFrame(THAA_all)

df_FAAALL = df_FAAALL.add_suffix("_FAA")
#replacing NaN values with 0s to prevent code failure
#column numbers should match index for Asx D/L to Total column labels
for col in df_FAAALL.columns[15:26]:
    df_FAAALL[col] = pd.to_numeric(df_FAAALL[col], errors="coerce")

df_FAAALL = df_FAAALL.replace(np.nan, 0.0, regex=True)

df_FAAALL.sort_values(by=['NEaarNo_FAA'], ascending=True)


df_THAAALL = df_THAAALL.add_suffix("_THAA")

for col in df_THAAALL.columns[13:24]:
    df_THAAALL[col] = pd.to_numeric(df_THAAALL[col], errors="coerce")

df_THAAALL = df_THAAALL.replace(np.nan, 0.0, regex=True)

df_THAAALL.sort_values(by=['NeaarNo_THAA'], ascending=True)

#concatenating df_FAA and df_THAA dataframes. Only df_FAA catagory columns will be included in this table
df_alldata =  pd.concat([df_FAAALL, df_THAAALL[[("Asx D/L_THAA"),
                                           ("Glx D/L_THAA"),
                                           ("Ser D/L_THAA"),
                                           ("Arg D/L_THAA"),
                                           ("Ala D/L_THAA"),
                                                ("Val D/L_THAA"),
                                           ("Phe D/L_THAA"),
                                           ("Leu D/L_THAA"),
                                           ("Ile D/L_THAA"),
                                                ("[Ser]/[Ala] D/L_THAA")]]], axis=1)

#concatenating df_FAA and df_THAA dataframes. Only df_FAA catagory columns will be included in this table
df_mean_sites = df_alldata.sort_values(by=["Site_FAA", "Depth order_FAA"], axis=0)

#df_mean_all = df_mean_all.sort_values(["Age rank_FAA", "Quaternary sites_FAA"], inplace=False, ascending=True)
df_mean_sites["Horizon"] = df_alldata["Site_FAA"] + " " + df_alldata["Depth_FAA"]

df_mean_sites.columns

#The following code is to create plots which defines colour by borehole and not MS cycle
#all colours at https://xkcd.com/color/rgb/ 'o', 'p', 'v', '*', '^', 'h', '<',  'd', '8', '>', 'P', 's', 'X', (6,1,0), 'H', 'D'

markers = ['o', 'p', 'v', '*', '^', 'h', #Devavanya markers
           'o', 'p', 'v', '*', '^', 'h', '<',  'd', '8', '>', 'P', 's', #Jaszladany markers
           'o', 'p', 'v', '*', '^', #Kevermes markers
           'o', 'p', 'v', '*', 'P', 'h', '<', '>', 'd', '8', 'P', #Mindszent markers
           'o', 'p', 'v', '*', '^', #Pusztaottlaka markers
           'o', 'p', 'v', '*', '^', 'h', '<', '>', 'd', '8', 'P', 's', #Szarvas markers
           'o', 'p', 'v', '*', '^', 'h', '<', '>', 'd' #Veszto markers
           ]

# Extract unique horizons
unique_horizons = df_mean_sites['Horizon'].unique()

# Ensure there are enough markers for each unique horizon
if len(unique_horizons) > len(markers):
    raise ValueError("Not enough markers for the number of unique horizons")

# Create a dictionary to map horizons to markers
horizon_marker_map = {horizon: markers[i] for i, horizon in enumerate(unique_horizons)}

# Print the mapping for verification
print("Horizon to Marker Mapping:")
for horizon, marker in horizon_marker_map.items():
    print(f"{horizon}: {marker}")

# Assign markers to the DataFrame based on the horizon
marker_styles = dict(zip(unique_horizons, markers))


# Verify the DataFrame with assigned markers
print(df_mean_sites.head())
#defining colours to be used for each site
palette = {'Dévaványa': 'red', 'Devavanya': 'red', 'Vészto': 'maroon', 'Veszto': 'maroon', 'Szarvas': 'darkorange',
           'Mindszent': 'green', 'Jászladány' : 'mediumblue', 'Jaszladany' : 'mediumblue', 'Kevermes': 'magenta', 'Pusztaottlaka' : 'plum'}

# Add a column for edge color
#df_mean_sites['edgecolor'] = df_mean_sites['Non-closed system_FAA'].apply(lambda x: 'black' if x == 'Yes' else 'none')

# Add a column for edge color
# Map 'Site_FAA' to colors
df_mean_sites['Color'] = df_mean_sites['Site_FAA'].map(palette)

# Add a column for edge color
#df_mean_sites['alpha'] = df_mean_sites['Non-closed system_FAA'].apply(lambda x: 0.4 if x == 'Yes' else 1)

df_mean_sites['label'] = df_mean_sites['Site_FAA'] + " " + df_mean_sites['Depth_FAA']

#The following code is to create plots which defines colour by borehole and not MS cycle
#all colours at https://xkcd.com/color/rgb/ 'o', 'p', 'v', '*', '^', 'h', '<',  'd', '8', '>', 'P', 's', 'X', (6,1,0), 'H', 'D'

markers = ['o', 'p', 'v', '*', '^', 'h',
           'o', 'p', 'v', '*', '^', 'h', '<',  'd', '8', '>', 'P', 's',
           'o', 'p', 'v', '*', '^',
           'o', 'p', 'v', '*', 'P', 'h', '<', '>', 'd', '8', 'P',
           'o', 'p', 'v', '*', '^',
           'o', 'p', 'v', '*', '^', 'h', '<', '>', 'd', '8', 'P', 's',
           'o', 'p', 'v', '*', '^', 'h', '<', '>', 'd'
           ]

palette = {'Dévaványa': 'red', 'Devavanya': 'red', 'Vészto': 'maroon', 'Veszto': 'maroon', 'Szarvas': 'darkorange',
           'Mindszent': 'green', 'Jászladány' : 'mediumblue', 'Jaszladany' : 'mediumblue', 'Kevermes': 'magenta', 'Pusztaottlaka' : 'plum'}

sns.set(style="ticks")
fig, ax = plt.subplots(2, 2, figsize=(12, 12))
sns.scatterplot(ax=ax[0,0], x=df_mean_sites["Asx D/L_FAA"], y=df_mean_sites["Asx D/L_THAA"],
                         data=df_mean_sites, hue=df_mean_sites["Site_FAA"],
                         style=df_mean_sites["Horizon"],
                         markers=markers, s=70, palette=palette, legend=False)
ax[0,0].set_xlabel("FAA Asx D/L")
ax[0,0].set_ylabel("THAA Asx D/L")
ax[0,0].set_ylim(0,1.1)
ax[0,0].set_xlim(0,1.1)

sns.scatterplot(ax=ax[0,1], x=df_mean_sites["Ala D/L_FAA"], y=df_mean_sites["Ala D/L_THAA"],
                         data=df_mean_sites, hue=df_mean_sites["Site_FAA"],
                         style=df_mean_sites["Horizon"],
                         markers=markers, s=70, palette=palette, legend=False)
ax[0,1].set_xlabel("FAA Ala D/L")
ax[0,1].set_ylabel("THAA Ala D/L")
ax[0,1].set_ylim(0,1.1)
ax[0,1].set_xlim(0,1.1)

sns.scatterplot(ax=ax[1,0], x=df_mean_sites["Glx D/L_FAA"], y=df_mean_sites["Glx D/L_THAA"],
                         data=df_mean_sites, hue=df_mean_sites["Site_FAA"],
                         style=df_mean_sites["Horizon"],
                         markers=markers, s=70, palette=palette, legend=False)
ax[1,0].set_xlabel("FAA Glx D/L")
ax[1,0].set_ylabel("THAA Glx D/L")
ax[1,0].set_ylim(0,1.1)
ax[1,0].set_xlim(0,1.1)

depth_to_site_dict = df_mean_sites.set_index("Horizon")["Site_FAA"].to_dict()
df_mean_sites['Subscale'] = df_mean_sites['Horizon'].map(depth_to_site_dict)
df_mean_sites['Subscale'] = pd.Categorical(df_mean_sites['Subscale'])  # creates a fixed order
sns.scatterplot(ax=ax[1,1], x=df_mean_sites["Val D/L_FAA"], y=df_mean_sites["Val D/L_THAA"],
                         data=df_mean_sites, hue=df_mean_sites["Subscale"],
                         style=df_mean_sites["Horizon"],
                         markers=marker_styles, s=70, palette=palette)
ax[1,1].set_xlabel("FAA Val D/L")
ax[1,1].set_ylabel("THAA Val D/L")
ax[1,1].set_ylim(0,1.1)
ax[1,1].set_xlim(0,1.1)

# create a dictionary mapping the subscales to their color
handles, labels = ax[1,1].get_legend_handles_labels()
index_depth_title = labels.index("Horizon")
color_dict = {label: handle.get_markerfacecolor()
for handle, label in zip(handles[1:index_depth_title], labels[1:index_depth_title])}
# loop through the items, assign color via the subscale of the item idem
for handle, label in zip(handles[index_depth_title + 1:], labels[index_depth_title + 1:]):
  handle.set_markerfacecolor(color_dict[depth_to_site_dict[label]])
#create a legend only using the items
#legend1 = plt.legend(handles[index_depth_title + 1:], labels[index_depth_title + 1:], title='Site & Horizon',
 #                   loc="upper center", bbox_to_anchor=(0.5, -0.05), fontsize=10, ncol=5)

legend = ax[1, 1].legend(handles[index_depth_title + 1:], labels[index_depth_title + 1:], loc='upper right', ncol=5,
                         fontsize=8)
legend.set_bbox_to_anchor((1.12, -0.2))  # Adjust the anchor point for the legend

plt.show()

df_mean_sites.head()

# Function to plot with highlighting outliers
def plot_with_highlighting(ax, data, x, y, hue, style, palette, marker_styles, outlier_column, outlier_value, normal_alpha, outlier_alpha):
    plotted_marker_categories = set()
    plotted_color_categories = set()

    for marker_category, color_category, x_val, y_val, outlier in zip(data[style], data[hue], data[x], data[y], data[outlier_column]):
        color = palette[color_category]
        marker = marker_styles[marker_category]
        alpha = outlier_alpha if outlier == outlier_value else normal_alpha
        edgecolor = 'white' if outlier == outlier_value else 'black'

        if color_category not in plotted_color_categories:
            ax.scatter(x_val, y_val, marker=marker, color=color, label=color_category, alpha=alpha, edgecolors=edgecolor, lw=0.1, zorder=10, s=100)
            plotted_marker_categories.add(marker_category)
            plotted_color_categories.add(color_category)
        else:
            ax.scatter(x_val, y_val, marker=marker, color=color, alpha=alpha, edgecolors=edgecolor, zorder=10, s=100)

# Adjust alpha values for normal and outlier points
normal_alpha = 1
outlier_alpha = 0.4  # Lower alpha for outliers


fig, ax = plt.subplots(2, 2, figsize=(12, 12))

# Plot Asx data
plot_with_highlighting(
    ax[0,0], df_mean_sites, "Asx D/L_FAA", "Asx D/L_THAA", hue='Site_FAA', style='Horizon', palette=palette, marker_styles=marker_styles,
    outlier_column='Outlier_Asx_FAA', outlier_value='Yes', normal_alpha=normal_alpha, outlier_alpha=outlier_alpha
)

ax[0,0].set_xlabel("FAA Asx D/L")
ax[0,0].set_ylabel("THAA Asx D/L")
ax[0,0].set_ylim(0,1.1)
ax[0,0].set_xlim(0,1.1)


# Plot data
plot_with_highlighting(
    ax[0,1], df_mean_sites, "Ala D/L_FAA", "Ala D/L_THAA", hue='Site_FAA', style='Horizon', palette=palette, marker_styles=marker_styles,
    outlier_column='Outlier_Ala_FAA', outlier_value='Yes', normal_alpha=normal_alpha, outlier_alpha=outlier_alpha
)

ax[0,1].set_xlabel("FAA Ala D/L")
ax[0,1].set_ylabel("THAA Ala D/L")
ax[0,1].set_ylim(0,1.1)
ax[0,1].set_xlim(0,1.1)


# Plot data
plot_with_highlighting(
    ax[1,0], df_mean_sites, "Glx D/L_FAA", "Glx D/L_THAA", hue='Site_FAA', style='Horizon', palette=palette, marker_styles=marker_styles,
    outlier_column='Outlier_Glx_FAA', outlier_value='Yes', normal_alpha=normal_alpha, outlier_alpha=outlier_alpha
)

ax[1,0].set_xlabel("FAA Glx D/L")
ax[1,0].set_ylabel("THAA Glx D/L")
ax[1,0].set_ylim(0,1.1)
ax[1,0].set_xlim(0,1.1)

# Plot data
plot_with_highlighting(
    ax[1,1], df_mean_sites, "Val D/L_FAA", "Val D/L_THAA", hue='Site_FAA', style='Horizon', palette=palette, marker_styles=marker_styles,
    outlier_column='Outlier_Val_FAA', outlier_value='Yes', normal_alpha=normal_alpha, outlier_alpha=outlier_alpha
)

ax[1,1].set_xlabel("FAA Val D/L")
ax[1,1].set_ylabel("THAA Val D/L")
ax[1,1].set_ylim(0,1.1)
ax[1,1].set_xlim(0,1.1)


plt.show()

"""# The following script is to create an age vs. D/l plot for valine, alanine and glx. This is to show how D/Ls are progressing with age and also which horizons do not follow the general trend.

The following script is to create an age vs. D/l plot for valine, alanine and glx. This is to show how D/Ls are progressing with age and also which horizons do not follow the general trend.
"""

#calculating horizon mean for each sample
#function to calculate two stds
def double_std(array):
 return np.std(array) * 2

df_FAA_mean = df_FAA.groupby(['Level/ Sample_FAA'], as_index=False).agg(
                      {'Asx D/L_FAA':['mean', 'std'],'Glx D/L_FAA':['mean', 'std'], 'Ala D/L_FAA':['mean', 'std'], 'Val D/L_FAA':['mean', 'std'], "[Ser]/[Ala]_FAA":['mean', 'std'],
                       "Quaternary sites_FAA": 'first', "Age_mid_FAA":'first', "Age_range_FAA" : 'first', "Age_error_FAA" : 'first', "MS_Cycle_FAA" : 'first', "Basin_FAA" : 'first'})

df_FAA_mean.columns = ["Level/ Sample", "Asx D/L mean", "Asx D/L std", "Glx D/L mean", "Glx D/L std",
                       "Ala D/L mean", "Ala D/L std", "Val D/L mean", "Val D/L std", "[Ser]/[Ala] D/L_FAA mean", "[Ser]/[Ala] D/L_FAA std", "Quaternary sites", "Age Mid Point", "Age if known", "Age error", "MS Cycle", "Basin"]

df_THAA_mean = df_THAA.groupby(['Level/ Sample_THAA'], as_index=False).agg(
                      {'Asx D/L_THAA':['mean', 'std'],'Glx D/L_THAA':['mean', 'std'], 'Ala D/L_THAA':['mean', 'std'], 'Val D/L_THAA':['mean', 'std'], "[Ser]/[Ala]_THAA":['mean', 'std'],
                       "Quaternary sites_THAA": 'first', "Age_mid_THAA":'first', "Age if known_THAA" : 'first', "Age_error_THAA" : 'first', "MS Cycle_THAA" : 'first', "Basin_THAA" : 'first'})

df_THAA_mean.columns = ["Level/ Sample", "Asx D/L mean", "Asx D/L std", "Glx D/L mean", "Glx D/L std",
                       "Ala D/L mean", "Ala D/L std", "Val D/L mean", "Val D/L std", "[Ser]/[Ala] D/L_THAA mean", "[Ser]/[Ala] D/L_THAA std",
                        "Quaternary sites", "Age Mid Point", "Age if known", "Age error", "MS Cycle", "Basin"]

df_THAA_mean.head()

MS_cycles = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/EQuaTe data/HungarianData/MScyclesdefined.csv", sep=',', encoding='latin-1')


age_dict_min = dict(zip(MS_cycles["Level"], MS_cycles["Age min"]))

df_FAA_mean["Age min"] = df_FAA_mean["Level/ Sample"].map(age_dict_min)
df_THAA_mean["Age min"] = df_THAA_mean["Level/ Sample"].map(age_dict_min)

age_dict_max = dict(zip(MS_cycles["Level"], MS_cycles["Age max"]))

df_FAA_mean["Age max"] = df_FAA_mean["Level/ Sample"].map(age_dict_max)
df_THAA_mean["Age max"] = df_THAA_mean["Level/ Sample"].map(age_dict_max)

df_FAA_mean["Error"] = (df_FAA_mean["Age max"] - df_FAA_mean["Age min"])/2
df_THAA_mean["Error"] = (df_THAA_mean["Age max"] - df_THAA_mean["Age min"])/2

#defining function to create age vs. D/l plot

def age_scatter(df1, AA, fig1, fraction, position):

  #creating lists of column containing the required AA
  FAA_colnames = [col for col in df1.columns if str(AA) in col]
  #THAA_colnames = [col for col in df2.columns if str(AA) + " D/L_THAA" in col]

  palette = {
      'Devavanya': 'red',
      'Dévaványa': 'red',
      'Veszto': 'maroon',
      'Vészto': 'maroon',
      'Szarvas': 'darkorange',
      'Mindszent': 'green',
      'Jászladány' : 'mediumblue',
      'Kevermes': 'magenta',
      'Pusztaottlaka' : 'plum'
      }
  marker_styles_v= {
     'Koros Basin': 'o',
     'Mako Trough': '^',
     'Jaszsag Basin' : '*',
     'Maros Fan': 's'
     }
  y_err = list(df1["Age error"])
  fig, ax = plt.subplots(figsize=fig1)
  #x_err = list(df1["Error"])
  ax.errorbar(df1["Age Mid Point"], df1[FAA_colnames[0]], yerr= df1[FAA_colnames[1]], linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=1) #y error
  ax.errorbar(df1["Age Mid Point"], df1[FAA_colnames[0]], xerr = y_err, linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=2) #y error

  plotted_marker_categories = set()
  plotted_color_categories = set()

  for marker_category, color_category, x, y in zip(df1['Basin'],df1["Quaternary sites"], df1["Age Mid Point"], df1[FAA_colnames[0]]):
    if color_category not in plotted_color_categories:
      ax.scatter(x, y, marker=marker_styles_v[marker_category], color=palette[color_category], label=f'{color_category}', zorder=10)
      plotted_marker_categories.add(marker_category)
      plotted_color_categories.add(color_category)
    else:
      ax.scatter(x, y, marker=marker_styles_v[marker_category], color=palette[color_category], zorder=10)

  # Add legend
  desired_order = ['Vészto', 'Dévaványa', 'Szarvas', 'Mindszent', 'Jászladány', 'Kevermes', 'Pusztaottlaka'] #order of labels in legend

  handles, labels = ax.get_legend_handles_labels()
  ordered_handles = [handles[labels.index(label)] for label in desired_order]
  ordered_labels = ["Vésztő, KB", "Dévaványa, KB", 'Szarvas, KB', 'Mindszent, MT', 'Jászladány, JB', 'Kevermes, BB', 'Pusztaottlaka, BB']

  ax.legend(handles=ordered_handles, labels=ordered_labels, loc='lower right', fontsize=10)

  ax.set_xlabel("Interpolated age/ ka ", fontsize=14)
  ax.set_ylabel(str(AA) + " " + str(fraction), fontsize=14)
  ax.set_ylim(0,1.1)

  ax.axvline(40, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(140, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(252, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(343, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(436, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(632, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(802, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(880, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(964, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(1200, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(1290, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(1456, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(1535, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(1707, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(1865, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(2155, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(2240, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(2487.5, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvline(2600, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax.axvspan(40, 140, alpha=0.2, color="grey")
  ax.axvspan(252, 436, alpha=0.2, color="grey")
  ax.axvspan(802, 964, alpha=0.2, color="grey")
  ax.axvspan(1200, 1535, alpha=0.2, color="grey")
  ax.axvspan(1707, 2155, alpha=0.2, color="grey")
  ax.axvspan(2487.5, 2600, alpha=0.2, color="grey")
  ax.axvspan(2240, 2487.5, alpha=0.2, color="grey")
  plt.rcParams['figure.dpi'] = 500
  plt.rcParams['savefig.dpi'] = 500
  plt.show()

df_THAA_mean.tail()

asx_THAA = (10, 6)
Asx_THAA_plt = age_scatter(df_FAA_mean, "Asx", asx_THAA, "FAA D/L", 0.03)

asx_THAA = (10, 6)
Asx_THAA_plt = age_scatter(df_THAA_mean, "Asx", asx_THAA, "THAA D/L", 0.03)

ala_THAA = (10, 6)
Ala_THAA_plt = age_scatter(df_THAA_mean, "Ala", ala_THAA, "THAA D/L", 0.03)

ala_FAA = (10, 6)
Ala_FAA_plt = age_scatter(df_FAA_mean, "Ala", ala_FAA, "FAA D/L", 0.03)

val_THAA = (10, 6)
Val_THAA_plt = age_scatter(df_THAA_mean, "Val", val_THAA, "THAA D/L", 0.03)

val_FAA = (10, 6)
Val_FAA_plt = age_scatter(df_FAA_mean, "Val", val_FAA, "FAA D/L", 0.05)

glx_THAA = (10, 6)
glx_THAA_plt = age_scatter(df_THAA_mean, "Glx", glx_THAA, "THAA D/L", 0.03)

glx_FAA = (10, 6)
glx_FAA_plt = age_scatter(df_FAA_mean, "Glx", glx_FAA, "FAA D/L", 0.03)

"""# IcPD dataset comparison plots"""

#import comparison data
"""
import csv or excel file by including the correct filepath with the following information:
- Region (Netherlands from Penkman et al., 2013; Preece et al., 2020; EEP is from Tesakov et al., 2020; British data is from Penkman et al., 2013)
- Attributed age: range and mid point
- FAA and THAA D/L values Asx, Glx, Ala, Val mean and standard deviation
"""


comp_df = pd.read_excel("INSERT FILE PATH TO PREVIOUSLY PUBLISHED DATA HERE", sheet_name="Sheet1")

koros_df = df_THAA_mean.loc[df_THAA_mean['Basin'].isin(['Koros Basin'])]

#df_THAA_mean["Country"] = "Hungary"

comp_df["Country"].unique()

import seaborn as sns
import matplotlib.pyplot as plt

# Create the figure and axes
comp_fig, ax = plt.subplots(figsize=(10, 6))

# Create lists of columns containing the required AA
sns.set(style="ticks")

# Define the palettes
palette = {
    'Devavanya': 'red',
    'Dévaványa': 'red',
    'Veszto': 'maroon',
    'Vészto': 'maroon',
    'Szarvas': 'darkorange',
    'Mindszent': 'green',
    'Jászladány' : 'mediumblue',
    'Kevermes': 'magenta',
    'Pusztaottlaka' : 'plum'
    }

marker_styles_v = {
    'Koros Basin': 'o',
    'Mako Trough': '^',
    'Jaszsag Basin' : '*',
    'Maros Fan': 's',
    "Hungary" : "o"
}

# Create a set to track plotted categories
plotted_marker_categories = set()
plotted_color_categories = set()

# Add error bars for df_THAA_mean
y_err = list(df_THAA_mean["Error"])
ax.errorbar(df_THAA_mean["Age Mid Point"],
            df_THAA_mean['Val D/L mean'],
            yerr=df_THAA_mean['Val D/L std'],
            linestyle='None',
            color='Black',
            elinewidth=0.2,
            capsize=0.5,
            zorder=1,
            fmt=' ')  # Remove any line connecting points
ax.errorbar(df_THAA_mean["Age Mid Point"],
            df_THAA_mean['Val D/L mean'],
            xerr=y_err,
            linestyle='None',
            color='Black',
            elinewidth=0.2,
            capsize=0.5,
            zorder=1,
            fmt=' ')  # Remove any line connecting points

# Scatter plot for each category in df_THAA_mean
for marker_category, color_category, x, y in zip(df_THAA_mean['Basin'], df_THAA_mean["Quaternary sites"], df_THAA_mean["Age Mid Point"], df_THAA_mean["Val D/L mean"]):
    if color_category not in plotted_color_categories:
        ax.scatter(x, y,
                   marker=marker_styles_v[marker_category],
                   color=palette[color_category],
                   label=f'{color_category}',
                   zorder=10,
                   s=30)
        plotted_marker_categories.add(marker_category)
        plotted_color_categories.add(color_category)
    else:
        ax.scatter(x, y,
                   marker=marker_styles_v[marker_category],
                   color=palette[color_category],
                   s=30)

# sns.color_palette("rocket")[5], #muted blue
# sns.color_palette("tab10")[8], #brown

# Scatter plot for comp_df and HB_df
comp_palette = [sns.color_palette("tab10")[9], #olive green
                sns.color_palette("tab10")[7], #greyUK
                sns.color_palette("tab10")[8], #neon green EEP
                sns.color_palette("tab10")[1], #orange URG
                sns.color_palette("tab10")[3], #red
                'black',
                sns.color_palette("tab10")[0], #muted blue
                sns.color_palette("tab10")[4]] #purple

markers = ["X", "h", "p", "D", "v", "d", "s", "P"]

sns.scatterplot(x=comp_df['Rough age number '],
                y=comp_df["Val D/L mean"],
                data=comp_df,
                hue=comp_df["Country"],
                style=comp_df["Country"],
                markers=markers,
                ax=ax,
                zorder=10,
                palette=comp_palette,
                s=50)

# Add error bars for comp_df and HB_df without lines
ax.errorbar(comp_df['Rough age number '],
            comp_df["Val D/L mean"],
            linestyle='None',
            color='Black',
            elinewidth=0.2,
            capsize=0.5,
            zorder=1,
            fmt='none')  # Remove any line

ax.errorbar(comp_df['Rough age number '],
            comp_df["Val D/L mean"],
            yerr=comp_df["Val D/L sd"],
            linestyle='None',
            color='Black',
            elinewidth=0.2,
            capsize=0.5,
            zorder=1,
            fmt='none')  # Remove any line

ax.errorbar(comp_df['Rough age number '],
            comp_df["Val D/L mean"],
            xerr=comp_df["Age error"],
            linestyle='None',
            color='Black',
            elinewidth=0.2,
            capsize=0.5,
            zorder=1,
            fmt='none')  # Remove any lines

# Add legend in the desired order
desired_order = ['Vészto', 'Dévaványa', 'Szarvas', 'Mindszent', 'Jászladány', 'Kevermes', 'Pusztaottlaka', 'UK', 'Netherlands', 'East European Plain']
handles, labels = ax.get_legend_handles_labels()
ordered_handles = [handles[labels.index(label)] for label in desired_order]
ordered_labels = ['Vészto, KB', 'Dévaványa, KB', 'Szarvas, KB', 'Mindszent, MT', 'Jászladány, JB', 'Kevermes, MF', 'Pusztaottlaka, MF', 'UK', 'Netherlands', 'East European Plain']
ax.legend(handles=ordered_handles, labels=ordered_labels, loc='lower right', fontsize=8)

#ax.legend(loc='lower right', fontsize=10)

plt.xlabel('Estimated Age (ka)', fontsize=14)
plt.ylabel('Mean THAA Val D/L', fontsize=14)
plt.xlim(0,2700)
plt.ylim(0,1.1)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
# Save the figure with high resolution
plt.rcParams['figure.dpi'] = 800
plt.rcParams['savefig.dpi'] = 800

# Show the plot
plt.show()

"""# Age vs depth vs Val D/L THAA"""

aar_ves = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Vészto']
aar_dev = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Dévaványa']
aar_szar = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Szarvas']
aar_mind = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Mindszent']
aar_jas = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Jászladány']
aar_pus = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Pusztaottlaka']
aar_kev = df_THAA_mean.loc[df_THAA_mean['Quaternary sites'] == 'Kevermes']

aar_jas

Depth = [0, 60, 143, 224, 318, 410, 440]
Age = [0, 500, 1000, 1500, 2000, 2500, 2600]

Depth_v = [0, 90, 198, 273, 378, 464, 493]

Depth_s = [0, 73, 151, 224, 326, 418, 442]

Depth_m = [0, 148, 263, 366, 518, 596, 624]

Depth_j = [0, 124, 199, 247, 296, 340, 350]
Depth_p = [0, 76, 165, 224, 335, 411, 482]
Depth_k = [0, 128, 227, 292, 395, 483, 487]

Age_j = [0, 500, 1000, 1500, 2000, 2500, 2600]

aar_ves.columns

import matplotlib.pyplot as plt
import numpy as np

def depth_age(df, Depth, AA, title, color, ax1, known_ages):
  """
  This code creates a core log for each borehole, demonstrating how D/Ls increase with time and depth
  """
  # Sample data: x vs. depth
  mean_col = str(AA) + " D/L mean"
  axis_title = str(AA) + " D/L THAA"
  mean_sd = str(AA) + " D/L std"
  x_values = df[mean_col]  # Sample x values (0 to 1)
  x_err = list(df[mean_sd])
  depth_values = df["Level/ Sample"]  # Sample depth values (replace with your own data)

  # Depths where you know the ages
  known_depths = Depth # Replace with your known depths within the 0 to 1 range
  # Replace with the corresponding ages
  Age = df["Age Mid Point"]

  ax1.plot(x_values, Age,'o', markersize=6, label='Interpolated age (ka)', color= color, zorder=10)
  ax1.errorbar(df[mean_col], df[mean_sd], xerr = x_err, linestyle='None', color='Black', elinewidth=0.5, capsize=1, zorder=2) #y error
  ax1.set_xlim(0, 1.1)
  ax1.set_ylim(0, 2600)
  ax1.set_xlabel(axis_title, fontsize=8)
  ax1.set_ylabel('Interpolated age (ka)', fontsize=8)
  ax1.tick_params(axis='y', labelsize=8)
  ax1.tick_params(axis='x', labelsize=8)
  ax1.invert_yaxis()

  # Create the secondary y-axis for age
  ax2 = ax1.twinx()

  # Create custom tick positions for the second y-axis
  age_tick_positions = known_depths

  # Create corresponding depth positions for the custom age tick positions
  depth_tick_positions = [np.interp(age, known_depths, known_ages) for age in age_tick_positions]

  # Set custom tick positions and labels for the age y-axis
  ax2.set_yticks(depth_tick_positions)
  ax2.set_yticklabels(age_tick_positions, fontsize=8)
  ax2.set_ylabel("Depth/ m", fontsize=8, color=color)
  ax2.tick_params(axis='y', labelcolor=color, labelsize=8)
  ax2.invert_yaxis()

  # Optionally, mark known depths with vertical lines
  ax1.axhline(40, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(140, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(252, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(343, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(436, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(632, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(802, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(880, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(964, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(1200, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(1290, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(1456, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(1535, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(1707, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(1865, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(2155, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(2240, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(2487.5, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhline(2600, alpha=1, linewidth=0.5, linestyle="--", color="black")

  ax1.axhline(2600, alpha=1, linewidth=0.5, linestyle="--", color="black")
  ax1.axhspan(40, 140, alpha=0.2, color="grey")
  ax1.axhspan(252, 436, alpha=0.2, color="grey")
  ax1.axhspan(802, 964, alpha=0.2, color="grey")
  ax1.axhspan(1200, 1535, alpha=0.2, color="grey")
  ax1.axhspan(1707, 2155, alpha=0.2, color="grey")
  ax1.axhspan(2487.5, 2600, alpha=0.2, color="grey")

  # Add labels and legends
  plt.title(title, fontsize=10)
  #ax1.legend(loc='upper left')

  plt.show()

Val, val = plt.subplots(figsize=(2,8))

depth_age(aar_dev, Depth, "Val", "Dévaványa", "red", val, Age)

Asx, asx = plt.subplots(figsize=(2,8))

depth_age(aar_dev, Depth, "Asx", "Dévaványa", "red", asx, Age)

Glx, glx = plt.subplots(figsize=(2,8))

depth_age(aar_dev, Depth, "Glx", "Dévaványa", "red", glx, Age)

Ala, ala = plt.subplots(figsize=(2,8))

depth_age(aar_dev, Depth, "Ala", "Dévaványa", "red", ala, Age)

ValV, valV = plt.subplots(figsize=(2,8))

depth_age(aar_ves, Depth_v, "Val", "Vésztő", "maroon", valV, Age)

AsxV, asxV = plt.subplots(figsize=(2,8))

depth_age(aar_ves, Depth_v, "Asx", "Vésztő", "maroon", asxV, Age)

GlxV, glxV = plt.subplots(figsize=(2,8))

depth_age(aar_ves, Depth_v, "Glx", "Vésztő", "maroon", glxV, Age)

AlaV, alaV = plt.subplots(figsize=(2,8))

depth_age(aar_ves, Depth_v, "Ala", "Vésztő", "maroon", alaV, Age)

ValS, valS = plt.subplots(figsize=(2,8))

depth_age(aar_szar, Depth_s, "Val", "Szarvas", "darkorange", valS, Age)

AsxS, asxS = plt.subplots(figsize=(2,8))

depth_age(aar_szar, Depth_s, "Asx", "Szarvas", "darkorange", asxS, Age)

GlxS, glxS = plt.subplots(figsize=(2,8))

depth_age(aar_szar, Depth_s, "Glx", "Szarvas", "darkorange", glxS, Age)

AlaS, alaS = plt.subplots(figsize=(2,8))

depth_age(aar_szar, Depth_s, "Ala", "Szarvas", "darkorange", alaS, Age)

ValM, valM = plt.subplots(figsize=(2,8))

depth_age(aar_mind, Depth_m, "Val", "Mindszent", "green", valM, Age)

AsxM, asxM = plt.subplots(figsize=(2,8))

depth_age(aar_mind, Depth_m, "Asx", "Mindszent", "green", asxM, Age)

GlxM, glxM = plt.subplots(figsize=(2,8))

depth_age(aar_mind, Depth_m, "Glx", "Mindszent", "green", glxM, Age)

AlaM, alaM = plt.subplots(figsize=(2,8))

depth_age(aar_mind, Depth_m, "Ala", "Mindszent", "green", alaM, Age)

J_V, j_v = plt.subplots(figsize=(2,8))
depth_age(aar_jas, Depth_j, "Val", "Jászladány", "blue", j_v, Age)

AsxJ, asxJ = plt.subplots(figsize=(2,8))

depth_age(aar_jas, Depth_j, "Asx", "Jaszladany", "blue", asxJ, Age_j)

GlxJ, glxJ = plt.subplots(figsize=(2,8))

depth_age(aar_jas, Depth_j, "Glx", "Jaszladany", "blue", glxJ, Age_j)

AlaJ, alaJ = plt.subplots(figsize=(2,8))

depth_age(aar_jas, Depth_j, "Ala", "Jaszladany", "blue", alaJ, Age_j)

P_V, p_v = plt.subplots(figsize=(2,8))
depth_age(aar_pus, Depth_p, "Val", "Pusztaottlaka", "plum", p_v, Age)

P_A, p_a = plt.subplots(figsize=(2,8))
depth_age(aar_pus, Depth_p, "Asx", "Pusztaottlaka", "plum", p_a, Age)

P_A, p_a = plt.subplots(figsize=(2,8))
depth_age(aar_pus, Depth_p, "Glx", "Pusztaottlaka", "plum", p_a, Age)

P_A, p_a = plt.subplots(figsize=(2,8))
depth_age(aar_pus, Depth_p, "Ala", "Pusztaottlaka", "plum", p_a, Age)

K_V, k_v = plt.subplots(figsize=(2,8))
depth_age(aar_kev, Depth_k, "Val", "Kevermes", "magenta", k_v, Age)

K_V, k_v = plt.subplots(figsize=(2,8))
depth_age(aar_kev, Depth_k, "Asx", "Kevermes", "magenta", k_v, Age)

K_V, k_v = plt.subplots(figsize=(2,8))
depth_age(aar_kev, Depth_k, "Glx", "Kevermes", "magenta", k_v, Age)

K_A, k_a = plt.subplots(figsize=(2,8))
depth_age(aar_kev, Depth_k, "Ala", "Kevermes", "magenta", k_a, Age)

"""# Temperature plot"""

sites = ["Jászladány", "Jászladány", "Jászladány", "Jászladány", "Devavanya", "Devavanya", "Devavanya", "Devavanya", "Mindszent", "Mindszent", "Mindszent", "Mindszent", "Szarvas", "Szarvas", "Szarvas", "Veszto", "Veszto", "Veszto",
         "Kevermes", "Kevermes", "Kevermes", "Pusztaottlaka", "Pusztaottlaka", "Pusztaottlaka"]

temp_depth = [85.6, 340, 436, 908, 129.5, 267, 530, 1115, 229, 384, 474, 1365, 264, 304, 915, 112, 699, 1185, 157, 266, 432, 76.8, 225.9, 500]

geotherm = [4.91,19.516,25.0264,52.1192,6.0088,12.3888,24.592,51.736,9.2745,15.552,19.197,55.2825,17.5032,20.1552,60.6645,6.1488,38.3751,65.0565,11.1784,18.9392,30.7584,4.92288,14.4819,32.05]

temp = [16.8, 31.4, 35, 64, 19.5, 28, 41, 66, 19, 24, 28.5, 64.5, 27, 32, 64, 16.3, 42.7, 69.5, 16, 23.2, 31, 16, 21.9, 36]

df_temp = pd.DataFrame({"Site" : sites, "Depth" : temp_depth, "Temperature" : temp, "deltaT" : geotherm})
df_temp.tail()

from sklearn.metrics import mean_squared_error


# Unique sites
Site_un = list(df_temp["Site"].unique())
desired_order = ['Veszto', 'Devavanya', 'Szarvas', 'Mindszent', 'Jászladány', 'Kevermes', 'Pusztaottlaka']
site_name = ["Vésztő, KB", "Dévaványa, KB", 'Szarvas, KB', 'Mindszent, MT', 'Jászladány, JB', 'Kevermes, BB', 'Pusztaottlaka, BB']
markers = ['o', 'o']

fig, ax = plt.subplots(figsize=(6, 8))
colors = {
    'Devavanya': 'red',
    'Dévaványa': 'red',
    'Veszto': 'maroon',
    'Vészto': 'maroon',
    'Szarvas': 'darkorange',
    'Mindszent': 'green',
    'Jászladány' : 'mediumblue',
    "Jaszladany" : 'mediumblue',
    'Kevermes': 'magenta',
    'Pusztaottlaka' : 'plum'
}

marker_styles_v= {
       'Koros Basin': 'o',
       'Mako Trough': '^',
       'Jaszsag Basin' : '*',
       'Maros Fan': 's',
               }
#MAP SITE TO BASIN

basin_mapping = {
    'Veszto': 'Koros Basin',
    'Devavanya': 'Koros Basin',
    'Szarvas': 'Koros Basin',
    'Mindszent': 'Mako Trough',
    'Jászladány': 'Jaszsag Basin',
    'Kevermes': 'Maros Fan',
    'Pusztaottlaka': 'Maros Fan'
}

for i in range(len(desired_order)):
    site = desired_order[i]
    df_loc = df_temp.loc[df_temp['Site'] == site]
    if not df_loc.empty:
        x = df_loc.Temperature
        y = df_loc.Depth
        basin = basin_mapping.get(site, 'Koros Basin')  # Default to 'Koros Basin' if not found
        marker = marker_styles_v.get(basin, 'o')  # Default to circle marker if not found
        ax.plot(x, y, marker=marker, linestyle='none', color=colors[site], label=site_name[i])
        # fitting a linear regression line
        m, b = np.polyfit(x, y, 1)
        # adding the regression line to the scatter plot
        y_pred = m * x + b
        ax.plot(x, y_pred, color=colors[site])

        # Calculating the mean squared error
       # mse = mean_squared_error(y, y_pred)
      #  mse_values[site] = mse

        # Calculating the standard deviation of the residuals
     #   residuals = y - y_pred
    #    std_residual = np.std(residuals)
   #     std_residuals[site] = std_residual
#
        # Adding error bars to the regression line
    #    ax.errorbar(x, y_pred, yerr=std_residual, fmt='none', ecolor=colors[site], capsize=5, alpha=0.6)

  #      print(f"MSE for {site}: {mse}")
   #     print(f"Standard deviation of residuals for {site}: {std_residual}")

ax.legend(loc="upper right", fontsize=10)
ax.set_xlabel("Temperature/ °C", fontsize=10)
ax.set_ylabel("Depth/ m", fontsize=10)
plt.gca().invert_yaxis()
plt.show()



# Print all MSE and standard deviation values
#print("MSE values for all sites:")
#for site, mse in mse_values.items():
 #   print(f"{site_name[desired_order.index(site)]}: {mse}")
#
#print("Standard deviation of residuals for all sites:")
#for site, std_residual in std_residuals.items():
 #   print(f"{site_name[desired_order.index(site)]}: {std_residual}")

"""
import csv or excel file by including the correct filepath with the following information:
- Site (borehole name)
- Basin (basine name)
- Top (top depth of sedimentary horizon (m))
- Bottom (bottom depth of sedimentary horizon (m))
- Depth_MidPoint (middle depth of sedimentary horizon (m))
- Interpolated temperature (interpolated temperature at depth midpoint degC)
- Interpolated age (interpolated age (ka)))
- Estimated uncertainty of both interpolations
- FAA and THAA D/L values Asx, Glx, Ala, Val mean and standard deviation
"""


temp_df = pd.read_csv("INSERT FILE PATH TO DOWNCORE TEMPERATURE MEASUREMENTS HERE", sep=',', encoding='latin-1')
temp_df.head()

df_THAA_MN.columns

"""
This code generates the 2d plots of D/L vs depth and temperature
"""


figt, axt = plt.subplots(figsize=(10,14), nrows=2)

palette = {
    'Devavanya': 'red',
    'Dévaványa': 'red',
    'Veszto': 'maroon',
    'Vészto': 'maroon',
    'Szarvas': 'darkorange',
    'Mindszent': 'green',
    'Jászladány' : 'mediumblue',
    "Jaszladany" : 'mediumblue',
    'Kevermes': 'magenta',
    'Pusztaottlaka' : 'plum'
    }

marker_styles = {
       'Koros': 'o',
       'Mako Trough': '^',
       'Jaszsag' : '*',
       'Maros Fan': 's',
               }
marker_styles_v= {
       'Koros Basin': 'o',
       'Mako Trough': '^',
       'Jaszsag Basin' : '*',
       'Maros Fan': 's'
               }

temp_df['marker_style'] = temp_df['Basin'].map(marker_styles)
df_THAA_mean['marker_style'] = df_THAA_mean['Basin'].map(marker_styles_v)
markers=list(temp_df['marker_style'])


axt[0].axvline(40, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(140, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(252, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(343, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(436, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(632, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(802, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(880, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(964, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(1200, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(1290, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(1456, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(1535, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(1707, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(1865, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(2155, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(2240, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(2487.5, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvline(2600, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[0].axvspan(40, 140, alpha=0.2, color="grey")
axt[0].axvspan(252, 436, alpha=0.2, color="grey")
axt[0].axvspan(802, 964, alpha=0.2, color="grey")
axt[0].axvspan(1200, 1535, alpha=0.2, color="grey")
axt[0].axvspan(1707, 2155, alpha=0.2, color="grey")
axt[0].axvspan(2487.5, 2600, alpha=0.2, color="grey")

x_errt = temp_df["Age_Error"] # estimated uncertainty with age
y_errt = temp_df["Temp_error"] # estimated uncertainty with temp

axt[0].errorbar(temp_df["Age"], temp_df['Temp'], xerr = x_errt, linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=1) #x error
axt[0].errorbar(temp_df["Age"], temp_df['Temp'], yerr = y_errt, linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=1) #y error


plotted_marker_categories = set()
plotted_color_categories = set()

for marker_category, color_category, x, y in zip(temp_df['Basin'], temp_df["Site"], temp_df["Age"], temp_df["Temp"]):
  if color_category not in plotted_color_categories:
    axt[0].scatter(x, y, marker=marker_styles[marker_category], color=palette[color_category], label=f'{color_category}', zorder=10)
    plotted_marker_categories.add(marker_category)
    plotted_color_categories.add(color_category)
  else:
    axt[0].scatter(x, y, marker=marker_styles[marker_category], color=palette[color_category])
  # Add legend

desired_order = ['Veszto', 'Devavanya', 'Szarvas', 'Mindszent', 'Jaszladany', 'Kevermes', 'Pusztaottlaka']

handles, labels = axt[0].get_legend_handles_labels()
ordered_handles = [handles[labels.index(label)] for label in desired_order]
ordered_labels = ["Vésztő, KB", "Dévaványa, KB", 'Szarvas, KB', 'Mindszent, MT', 'Jászladány, JB', 'Kevermes, BB', 'Pusztaottlaka, BB']

axt[0].legend(handles=ordered_handles, labels=ordered_labels, loc='lower right')
axt[0].set_xlabel("Interpolated age/ ka", fontsize=14)
axt[0].set_ylabel("ΔT/ °C", fontsize=14)

  # Show plot


for marker_category_v, color_category_v, x_v, y_v in zip(df_THAA_mean['Basin'], df_THAA_mean["Quaternary sites"], df_THAA_mean["Age Mid Point"], df_THAA_mean["Val D/L mean"]):
    plt.scatter(x_v, y_v, marker=marker_styles_v[marker_category_v], color=palette[color_category_v], label=f'{color_category_v}', zorder=10)

axt[1].set_xlabel("Interpolated age/ ka ", fontsize=14)
axt[1].set_ylabel("THAA Val D/L", fontsize=14)

axt[1].set_ylim(0,1.1)


y_err = list(df_THAA_mean["Error"])
axt[1].errorbar(df_THAA_mean["Age Mid Point"], df_THAA_mean['Val D/L mean'], yerr= df_THAA_mean['Val D/L std'], linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=1) #y error
axt[1].errorbar(df_THAA_mean["Age Mid Point"], df_THAA_mean['Val D/L mean'], xerr = y_err, linestyle='None', color='Black', elinewidth=0.5, capsize=0.5, zorder=1) #y error


axt[1].axvline(40, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(140, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(252, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(343, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(436, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(632, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(802, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(880, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(964, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(1200, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(1290, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(1456, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(1535, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(1707, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(1865, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(2155, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(2240, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(2487.5, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvline(2600, alpha=1, linewidth=0.5, linestyle="--", color="black", zorder=1)
axt[1].axvspan(40, 140, alpha=0.2, color="grey")
axt[1].axvspan(252, 436, alpha=0.2, color="grey")
axt[1].axvspan(802, 964, alpha=0.2, color="grey")
axt[1].axvspan(1200, 1535, alpha=0.2, color="grey")
axt[1].axvspan(1707, 2155, alpha=0.2, color="grey")
axt[1].axvspan(2487.5, 2600, alpha=0.2, color="grey")
#ax.axvspan(1535, 1707, alpha=0.2, color="grey")
#ax.axvspan(1865, 2155, alpha=0.2, color="grey")
#ax.axvspan(2240, 2487.5, alpha=0.2, color="grey")
plt.rcParams['figure.dpi'] = 500
plt.rcParams['savefig.dpi'] = 500
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress

x_temp = [4.4, 3.6, 4.2, 6.0, 7.1, 3.6, 7.0]
y_temp = [0.37, 0.38, 0.36, 0.52, 0.69, 0.4, 0.61]
color = ['maroon', 'red', 'darkorange', 'green', 'mediumblue', 'plum', 'magenta']
marker_shape = ['o', 'o', 'o', '^', '*', 's', 's']
labels = ["Veszto", "Devavanya", "Szarvas", "Mindszent", "Jaszladany", "Kevermes", "Pusztaottlaka"]

fig, ax = plt.subplots(figsize=(8, 6))

# Plotting the data points
for i in range(len(x_temp)):
    ax.scatter(x_temp[i], y_temp[i], color=color[i], marker=marker_shape[i], label=labels[i])

# Setting the x and y limits
ax.set_xlim(3, 8)
ax.set_ylim(0.3, 0.8)

# Step 2: Collect Data
x = np.array(x_temp)
y = np.array(y_temp)

# Fit a linear trend line
slope, intercept, r_value, p_value, std_err = linregress(x_temp, y_temp)
line = slope * np.array(x_temp) + intercept

# Calculate fitted values
y_fit = intercept + slope * x

# Step 4: Calculate Residuals
residuals = y - y_fit

# Step 5: Calculate RSS (Residual Sum of Squares)
RSS = np.sum(residuals**2)

# Step 6: Estimate Standard Error
n = len(x)  # Number of data points
SE = np.sqrt(RSS / (n - 2))

# Print results
print(f"Slope: {slope}")
print(f"Intercept: {intercept}")
print(f"Standard Error of the Regression: {SE}")

# Plot the linear trend line with dashed style
ax.plot(x_temp, line, color='black', alpha=0.5, label=f'Trend line: $y = {slope:.2f}x + {intercept:.2f}$')
ax.plot(x, y_fit, color='red', label='Fitted line')

# Calculate and display the R² value
r_squared = r_value**2
ax.text(3.1, 0.59, f'$R^2$ = {r_squared:.3f}', fontsize=10)

# Adding labels and title for clarity
ax.set_xlabel('ΔT/ °C')
ax.set_ylabel('Estimated THAA Val D/L')

# Adding legend
desired_order = ['Veszto', 'Devavanya', 'Szarvas', 'Mindszent', 'Jaszladany', 'Kevermes', 'Pusztaottlaka']

handles, labels = ax.get_legend_handles_labels()
ordered_handles = [handles[labels.index(label)] for label in desired_order]
ordered_labels = ["Vésztő, KB", "Dévaványa, KB", 'Szarvas, KB', 'Mindszent, MT', 'Jászladány, JB', 'Kevermes, BB', 'Pusztaottlaka, BB']
ax.legend(handles=ordered_handles, labels=ordered_labels, loc='upper left')

# Display the plot
plt.show()

#The following calculates the error for the age interpolation
# Known ages and depths
ages = np.array([0, 140, 252, 343, 436, 632, 802, 880, 964, 1200, 1290, 1456, 1535, 1707, 1865, 2155, 2240, 2487.5, 2600])
depths = np.array([0, 15.5, 33.7, 44.8, 75.4, 80.9, 107.1, 124, 139.6, 163.4, 187, 206.7, 239, 276, 298, 343.1, 352.2, 407, 449])
# Estimated depths at which to calculate ages
est_depths = np.array([5.46, 29.89, 36.895, 75.3, 130.325, 195.09])


def error(ages, depths, est_depths):
  # Number of Monte Carlo simulations
  N = 10000

  # Assume an uncertainty of 5% of the age value for known ages
  age_uncertainty = 0.05 * ages

  # Generate random samples for the known ages
  ages_samples = np.random.normal(ages[:, None], age_uncertainty[:, None], (len(ages), N))

  # Perform interpolation for each simulation
  interpolated_ages = np.array([
      np.interp(est_depths, depths, ages_samples[:, i])
      for i in range(N)
      ])
  # Estimate mean and standard deviation of interpolated ages
  mean_interpolated_ages = np.mean(interpolated_ages, axis=0)
  std_interpolated_ages = np.std(interpolated_ages, axis=0)

  # Print results
  for depth, mean_age, std_age in zip(est_depths, mean_interpolated_ages, std_interpolated_ages):
    print(f"Estimated Age at depth {depth:.2f} m: {mean_age:.2f} years ± {std_age:.2f} years")

  dev_error = pd.DataFrame({"Depth" : est_depths, "Age" : mean_interpolated_ages, "Error" : std_interpolated_ages})

  # Plot histograms of the simulated ages for each estimated depth
  fig, axes = plt.subplots(len(est_depths), 1, figsize=(10, len(est_depths) * 4))
  for i, depth in enumerate(est_depths):
    ax = axes[i]
    ax.hist(interpolated_ages[:, i], bins=50, edgecolor='k', alpha=0.7)
    ax.axvline(mean_interpolated_ages[i], color='red', linestyle='--', label=f'Estimated Age: {mean_interpolated_ages[i]:.2f} years')
    ax.set_xlabel('Estimated Age (years)')
    ax.set_ylabel('Frequency')
    ax.legend()
    ax.set_title(f'Histogram of Estimated Ages at Depth {depth:.2f} m')

  plt.tight_layout()
  plt.show()
  return dev_error

#The following calculates the error for the age interpolation for Veszto
# Known ages and depths
ages_v = np.array([0,   20, 140, 252,  436,  632,  802,    880,   964,  1200,   1290, 1456, 1535,   1707, 2155, 2487.5, 2600])
depths_v = np.array([0, 9.1, 21, 55.5, 86.9, 95.5, 137.7, 170.5, 195.1, 215.4, 231.8, 262.2, 281.5, 314.2, 411, 460.2, 493.2])
# Estimated depths at which to calculate ages
est_depths_v = np.array([25.545, 81.47, 82.58, 89.71, 95.625, 98.475, 137.715, 160.23,231.54, 431.58])

#len(depths_v)
vesz_error = error(ages_v, depths_v, est_depths_v)

#The following calculates the error for the age interpolation for Szarvas
# Known ages and depths
ages_s = np.array([0,   140,  252,   343,   436,   632,   802,    880,    964,    1200,   1290,  1456,   1535,   1707,   2155,   2487.5, 2600])
depths_s = np.array([0, 16.5, 28.95, 44.72, 67.48, 84.91, 121.17, 136.78, 146.75, 173.96, 185.2, 208.29, 235.85, 273.64, 354.18, 415.35, 442.42])
# Estimated depths at which to calculate ages
est_depths_s = np.array([10.825, 19.57, 53.31, 84.61, 97.475, 118.295, 125.595, 140.355, 140.355, 271.18, 320.23, 393.815, 442.415])

#len(depths_v)
sza_error = error(ages_s, depths_s, est_depths_s)

#The following calculates the error for the age interpolation for Szarvas
# Known ages and depths
ages_m = np.array([0,   20,  140,  436,   802,     964,    1200,  1456,    1535,   1707,  1865,  2155,   2240,  2487.5, 2600])
depths_m = np.array([0, 1,   9.9, 138.58, 194.41, 259.06, 298.3, 327.795, 395.8, 453.3, 492.7, 547.21, 566.45, 592.57, 624.07])
# Estimated depths at which to calculate ages
est_depths_m = np.array([18.1, 109.655, 136.385, 178.8, 206.57, 275.725, 287.975, 330.04, 422.8, 431.4, 468.765])

len(ages_m)
mind_error = error(ages_m, depths_m, est_depths_m)

#The following calculates the error for the age interpolation for Szarvas
# Known ages and depths
ages_j = np.array([0,   252,   343,    436,     632,    802,   964,  1290,     1456,   1535,   1707,  2155,   2240,  2487.5])
depths_j = np.array([0, 51.88, 73.02, 120.76, 131.82, 168.13, 195.82, 222.98, 238.73, 253.05, 272.78, 317.16, 328.94, 360])
# Estimated depths at which to calculate ages
est_depths_j = np.array([25.83, 43.735, 56.27, 102.675, 114.62, 118.78, 125.645, 141.17, 149.17, 165.66, 208.94])

len(ages_j)
jaz_error = error(ages_j, depths_j, est_depths_j)

#The following calculates the error for the age interpolation for Szarvas
# Known ages and depths
ages_p = np.array([0,   140, 252,343, 436,632,  802,   880,  964, 1200, 1290, 1456, 1535,1707, 1865, 2155,   2240,  2487.5, 2600])
depths_p = np.array([0, 20.5, 36, 55, 69, 89,  137.2, 147.5, 160, 191, 206.5, 215.5, 230, 274, 317.5, 355.5, 388, 409, 430])
# Estimated depths at which to calculate ages
est_depths_p = np.array([62.1, 79.25, 114.75, 338.15, 483])

len(depths_p)
jaz_error = error(ages_p, depths_p, est_depths_p)

#The following calculates the error for the age interpolation for Szarvas
# Known ages and depths
ages_k = np.array([0,  20,  140,  252,  343,  436, 632, 802, 880,   964, 1200, 1290, 1456, 1535,1707, 1865, 2155,   2240,  2487.5, 2600])
depths_k = np.array([0, 20, 35.5, 60.8,  89,  123, 138, 192, 202.5, 224, 246, 275.5, 285,  298, 351, 367.5, 427.6, 456.5, 483, 487])
# Estimated depths at which to calculate ages
est_depths_k = np.array([62.1, 74.74, 116.1, 133.25, 174.35, 310.75])

#len(ages_k)
kev_error = error(ages_k, depths_k, est_depths_k)

aar_jas['Level/ Sample']

V_at_est_depths = np.array(list(aar_mind["Val D/L mean"]))
depths = np.array(list(aar_mind["Level/ Sample"]))
print(len(V_at_est_depths))
print(len(depths))

# Known ages and depths
ages = np.array([0, 140, 252, 343, 436, 632, 802, 880, 964, 1200, 1290, 1456, 1535, 1707, 1865, 2155, 2240, 2487.5, 2600])
depths = np.array([0, 15.5, 33.7, 44.8, 75.4, 80.9, 107.1, 124, 139.6, 163.4, 187, 206.7, 239, 276, 298, 343.1, 352.2, 407, 449])

# Variable V at estimated depths (example data)
est_depths = np.array([5.46, 29.89, 36.895, 75.3, 130.325, 195.09])
V_at_est_depths = np.array(list(aar_dev["Val D/L mean"]))

# Age at which to estimate the variable V
target_age = 500

# Number of Monte Carlo simulations
N = 10000

# Assume an uncertainty of 5% of the age value for known ages, with a minimum uncertainty
age_uncertainty = np.maximum(0.05 * ages, 1)  # Set a minimum uncertainty of 1 year

# Generate random samples for the known ages
ages_samples = np.random.normal(ages[:, None], age_uncertainty[:, None], (len(ages), N))

# Perform interpolation for depths at the given age for each simulation
depth_at_target_age = np.array([
    np.interp(target_age, ages_samples[:, i], depths)
    for i in range(N)
])

# Interpolate variable V at the interpolated depths for each simulation
V_simulated = np.array([
    np.interp(depth_at_target_age[i], est_depths, V_at_est_depths)
    for i in range(N)
])

# Mean and standard deviation of interpolated V
mean_V = np.mean(V_simulated)
std_V = np.std(V_simulated)

# Print results for variable V at the target age
print(f"Estimated V at age {target_age} years: {mean_V:.2f} ± {std_V:.3f}")

# Plot histogram of the simulated V at the target age
plt.hist(V_simulated, bins=50, edgecolor='k', alpha=0.7)
plt.axvline(mean_V, color='red', linestyle='--', label=f'Estimated V: {mean_V:.2f}')
plt.xlabel('Estimated V')
plt.ylabel('Frequency')
plt.legend()
plt.title(f'Histogram of Estimated V at Age {target_age} years')
plt.show()

"""#3D plot: Depth vs. deltaTemp vs. THAA Val D/L"""

"""
The following code produces the 3D plot available at https://sites.google.com/york.ac.uk/pannonianbasinfig103dplot/home
"""

import pandas as pd
import plotly.express as px
"""
import csv or excel file by including the correct filepath with the following information:
- Site (borehole name)
- Top (top depth of sedimentary horizon (m))
- Bottom (bottom depth of sedimentary horizon (m))
- Depth_MidPoint (middle depth of sedimentary horizon (m))
- Temperature (interpolated temperature at depth midpoint degC)
- FAA and THAA D/L values Asx, Glx, Ala, Val mean and standard deviation
"""


file = pd.read_excel("INSERT LINK TO DATA HERE", sheet_name="Sheet1")

#transform csv file to dataframe
df = pd.DataFrame(file)

#code to create 3d scatter plot of temp vs. pollen zone vs. average D/L value from Alanine THAA fraction
fig = px.scatter_3d(df, x='Depth_MidPoint', y='Temperature', z='Val D/L mean_THAA',
                    color='Site', color_discrete_sequence=["red", "maroon", "darkorange", "green", "mediumblue", "plum", "magenta"],
                    labels={
                     "Depth_MidPoint": "Depth (m)",
                     "Temperature": "ΔT (°C)",
                     "Val D/L mean_THA": "THAA Val D/L"
                 })




fig.show()
